{{- if and (((.Values.hooks).nodejs).enabled) .Values.toolchain.config.files }}
{{ $ctx := . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: validate-{{ include "microfleet.fullname" . }}-config
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    helm.sh/chart: {{ template "microfleet.chart" . }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # ConfigMap is considered part of the release.
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-6"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
{{- range $filename, $content := .Values.toolchain.config.files }}
  {{ $filename }}: |
    {{ tpl $content $ctx | indent 4 | trim }}
{{- end }}
{{- end }}

{{- if and (((.Values.hooks).nodejs).enabled) .Values.toolchain.config.files }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: validate-{{ include "microfleet.fullname" . }}-config
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ include "microfleet.fullname" . }}
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    helm.sh/chart: {{ template "microfleet.chart" . }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # Job is considered part of the release.
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 60
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    metadata:
      name: {{ include "microfleet.fullname" . }}
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ include "microfleet.fullname" . }}
        helm.sh/chart: {{ template "microfleet.chart" . }}
    spec:
      restartPolicy: Never
      containers:
      - name: config-validator
        image: "node:alpine"
        command: ["/bin/sh"]
        args: ["-c", "node --check {{ .Values.toolchain.config.path }}/*.js"]
        volumeMounts:
        - name: config
          mountPath: {{ .Values.toolchain.config.path }}
      volumes:
      - name: config
        configMap:
          name: validate-{{ include "microfleet.fullname" . }}-config
      restartPolicy: Never
      terminationGracePeriodSeconds: 0
{{- end }}
